/* automatically generated by rust-bindgen */

pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_long;
pub type __uint64_t = ::libc::c_ulong;
pub type __quad_t = ::libc::c_long;
pub type __u_quad_t = ::libc::c_ulong;
pub type __dev_t = ::libc::c_ulong;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = ::libc::c_ulong;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_ulong;
pub type __off_t = ::libc::c_long;
pub type __off64_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
pub struct __fsid_t {
    pub __val: [::libc::c_int, ..2u],
}
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = ::libc::c_ulong;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = ::libc::c_long;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = ::libc::c_ulong;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = ::libc::c_ulong;
pub type __fsword_t = ::libc::c_long;
pub type __ssize_t = ::libc::c_long;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_char;
pub type __intptr_t = ::libc::c_long;
pub type __socklen_t = ::libc::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ptrdiff_t = ::libc::c_long;
pub type size_t = ::libc::c_ulong;
pub type wchar_t = ::libc::c_int;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulong;
pub type register_t = ::libc::c_long;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
pub struct __sigset_t {
    pub __val: [::libc::c_ulong, ..16u],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[repr(C)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask, ..16u],
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
pub struct Union_pthread_attr_t {
    pub data: [u64, ..7u],
}
impl Union_pthread_attr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
pub struct Struct___pthread_internal_list {
    pub __prev: *mut Struct___pthread_internal_list,
    pub __next: *mut Struct___pthread_internal_list,
}
pub type __pthread_list_t = Struct___pthread_internal_list;
#[repr(C)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub __kind: ::libc::c_int,
    pub __spins: ::libc::c_short,
    pub __elision: ::libc::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
pub struct pthread_mutex_t {
    pub data: [u64, ..5u],
}
impl pthread_mutex_t {
    pub fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..40u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct pthread_mutexattr_t {
    pub data: [u32, ..1u],
}
impl pthread_mutexattr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed1 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
#[repr(C)]
pub struct pthread_cond_t {
    pub data: [u64, ..6u],
}
impl pthread_cond_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed1 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..48u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_longlong {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct pthread_condattr_t {
    pub data: [u32, ..1u],
}
impl pthread_condattr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
pub struct Struct_Unnamed2 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __writer: ::libc::c_int,
    pub __shared: ::libc::c_int,
    pub __pad1: ::libc::c_ulong,
    pub __pad2: ::libc::c_ulong,
    pub __flags: ::libc::c_uint,
}
#[repr(C)]
pub struct pthread_rwlock_t {
    pub data: [u64, ..7u],
}
impl pthread_rwlock_t {
    pub fn __data(&mut self) -> *mut Struct_Unnamed2 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..56u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct pthread_rwlockattr_t {
    pub data: [u64, ..1u],
}
impl pthread_rwlockattr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..8u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
pub struct pthread_barrier_t {
    pub data: [u64, ..4u],
}
impl pthread_barrier_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..32u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_long {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct pthread_barrierattr_t {
    pub data: [u32, ..1u],
}
impl pthread_barrierattr_t {
    pub fn __size(&mut self) -> *mut [::libc::c_char, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __align(&mut self) -> *mut ::libc::c_int {
        unsafe { ::std::mem::transmute(self) }
    }
}
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type http_parser = Struct_http_parser;
pub type http_parser_settings = Struct_http_parser_settings;
pub type http_data_cb =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut http_parser,
                               arg2: *const ::libc::c_char, arg3: size_t)
                              -> ::libc::c_int>;
pub type http_cb =
    ::std::option::Option<extern "C" fn(arg1: *mut http_parser)
                              -> ::libc::c_int>;
pub type Enum_http_method = ::libc::c_uint;
pub static HTTP_DELETE: ::libc::c_uint = 0;
pub static HTTP_GET: ::libc::c_uint = 1;
pub static HTTP_HEAD: ::libc::c_uint = 2;
pub static HTTP_POST: ::libc::c_uint = 3;
pub static HTTP_PUT: ::libc::c_uint = 4;
pub static HTTP_CONNECT: ::libc::c_uint = 5;
pub static HTTP_OPTIONS: ::libc::c_uint = 6;
pub static HTTP_TRACE: ::libc::c_uint = 7;
pub static HTTP_COPY: ::libc::c_uint = 8;
pub static HTTP_LOCK: ::libc::c_uint = 9;
pub static HTTP_MKCOL: ::libc::c_uint = 10;
pub static HTTP_MOVE: ::libc::c_uint = 11;
pub static HTTP_PROPFIND: ::libc::c_uint = 12;
pub static HTTP_PROPPATCH: ::libc::c_uint = 13;
pub static HTTP_SEARCH: ::libc::c_uint = 14;
pub static HTTP_UNLOCK: ::libc::c_uint = 15;
pub static HTTP_REPORT: ::libc::c_uint = 16;
pub static HTTP_MKACTIVITY: ::libc::c_uint = 17;
pub static HTTP_CHECKOUT: ::libc::c_uint = 18;
pub static HTTP_MERGE: ::libc::c_uint = 19;
pub static HTTP_MSEARCH: ::libc::c_uint = 20;
pub static HTTP_NOTIFY: ::libc::c_uint = 21;
pub static HTTP_SUBSCRIBE: ::libc::c_uint = 22;
pub static HTTP_UNSUBSCRIBE: ::libc::c_uint = 23;
pub static HTTP_PATCH: ::libc::c_uint = 24;
pub static HTTP_PURGE: ::libc::c_uint = 25;
pub static HTTP_MKCALENDAR: ::libc::c_uint = 26;
pub type Enum_http_parser_type = ::libc::c_uint;
pub static HTTP_REQUEST: ::libc::c_uint = 0;
pub static HTTP_RESPONSE: ::libc::c_uint = 1;
pub static HTTP_BOTH: ::libc::c_uint = 2;
pub type Enum_flags = ::libc::c_uint;
pub static F_CHUNKED: ::libc::c_uint = 1;
pub static F_CONNECTION_KEEP_ALIVE: ::libc::c_uint = 2;
pub static F_CONNECTION_CLOSE: ::libc::c_uint = 4;
pub static F_TRAILING: ::libc::c_uint = 8;
pub static F_UPGRADE: ::libc::c_uint = 16;
pub static F_SKIPBODY: ::libc::c_uint = 32;
pub type Enum_http_errno = ::libc::c_uint;
pub static HPE_OK: ::libc::c_uint = 0;
pub static HPE_CB_message_begin: ::libc::c_uint = 1;
pub static HPE_CB_url: ::libc::c_uint = 2;
pub static HPE_CB_header_field: ::libc::c_uint = 3;
pub static HPE_CB_header_value: ::libc::c_uint = 4;
pub static HPE_CB_headers_complete: ::libc::c_uint = 5;
pub static HPE_CB_body: ::libc::c_uint = 6;
pub static HPE_CB_message_complete: ::libc::c_uint = 7;
pub static HPE_CB_status: ::libc::c_uint = 8;
pub static HPE_INVALID_EOF_STATE: ::libc::c_uint = 9;
pub static HPE_HEADER_OVERFLOW: ::libc::c_uint = 10;
pub static HPE_CLOSED_CONNECTION: ::libc::c_uint = 11;
pub static HPE_INVALID_VERSION: ::libc::c_uint = 12;
pub static HPE_INVALID_STATUS: ::libc::c_uint = 13;
pub static HPE_INVALID_METHOD: ::libc::c_uint = 14;
pub static HPE_INVALID_URL: ::libc::c_uint = 15;
pub static HPE_INVALID_HOST: ::libc::c_uint = 16;
pub static HPE_INVALID_PORT: ::libc::c_uint = 17;
pub static HPE_INVALID_PATH: ::libc::c_uint = 18;
pub static HPE_INVALID_QUERY_STRING: ::libc::c_uint = 19;
pub static HPE_INVALID_FRAGMENT: ::libc::c_uint = 20;
pub static HPE_LF_EXPECTED: ::libc::c_uint = 21;
pub static HPE_INVALID_HEADER_TOKEN: ::libc::c_uint = 22;
pub static HPE_INVALID_CONTENT_LENGTH: ::libc::c_uint = 23;
pub static HPE_INVALID_CHUNK_SIZE: ::libc::c_uint = 24;
pub static HPE_INVALID_CONSTANT: ::libc::c_uint = 25;
pub static HPE_INVALID_INTERNAL_STATE: ::libc::c_uint = 26;
pub static HPE_STRICT: ::libc::c_uint = 27;
pub static HPE_PAUSED: ::libc::c_uint = 28;
pub static HPE_UNKNOWN: ::libc::c_uint = 29;
#[repr(C)]
pub struct Struct_http_parser {
    pub _type: ::libc::c_uint,
    pub flags: ::libc::c_uint,
    pub state: ::libc::c_uint,
    pub header_state: ::libc::c_uint,
    pub index: ::libc::c_uint,
    pub nread: uint32_t,
    pub content_length: uint64_t,
    pub http_major: ::libc::c_ushort,
    pub http_minor: ::libc::c_ushort,
    pub status_code: ::libc::c_uint,
    pub method: ::libc::c_uint,
    pub http_errno: ::libc::c_uint,
    pub upgrade: ::libc::c_uint,
    pub data: *mut ::libc::c_void,
}
#[repr(C)]
pub struct Struct_http_parser_settings {
    pub on_message_begin: http_cb,
    pub on_url: http_data_cb,
    pub on_status: http_data_cb,
    pub on_header_field: http_data_cb,
    pub on_header_value: http_data_cb,
    pub on_headers_complete: http_cb,
    pub on_body: http_data_cb,
    pub on_message_complete: http_cb,
}
pub type Enum_http_parser_url_fields = ::libc::c_uint;
pub static UF_SCHEMA: ::libc::c_uint = 0;
pub static UF_HOST: ::libc::c_uint = 1;
pub static UF_PORT: ::libc::c_uint = 2;
pub static UF_PATH: ::libc::c_uint = 3;
pub static UF_QUERY: ::libc::c_uint = 4;
pub static UF_FRAGMENT: ::libc::c_uint = 5;
pub static UF_USERINFO: ::libc::c_uint = 6;
pub static UF_MAX: ::libc::c_uint = 7;
#[repr(C)]
pub struct Struct_http_parser_url {
    pub field_set: uint16_t,
    pub port: uint16_t,
    pub field_data: [Struct_Unnamed3, ..7u],
}
#[repr(C)]
pub struct Struct_Unnamed3 {
    pub off: uint16_t,
    pub len: uint16_t,
}
extern "C" {
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn http_parser_version() -> ::libc::c_ulong;
    pub fn http_parser_init(parser: *mut http_parser,
                            _type: Enum_http_parser_type);
    pub fn http_parser_execute(parser: *mut http_parser,
                               settings: *const http_parser_settings,
                               data: *const ::libc::c_char, len: size_t) ->
     size_t;
    pub fn http_should_keep_alive(parser: *const http_parser) ->
     ::libc::c_int;
    pub fn http_method_str(m: Enum_http_method) -> *const ::libc::c_char;
    pub fn http_errno_name(err: Enum_http_errno) -> *const ::libc::c_char;
    pub fn http_errno_description(err: Enum_http_errno) ->
     *const ::libc::c_char;
    pub fn http_parser_parse_url(buf: *const ::libc::c_char, buflen: size_t,
                                 is_connect: ::libc::c_int,
                                 u: *mut Struct_http_parser_url) ->
     ::libc::c_int;
    pub fn http_parser_pause(parser: *mut http_parser, paused: ::libc::c_int);
    pub fn http_body_is_final(parser: *const http_parser) -> ::libc::c_int;
}
